// Code generated by ent, DO NOT EDIT.

package birthday

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ritsec/ops-bot-iii/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLTE(FieldID, id))
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldDay, v))
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldMonth, v))
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldDay, v))
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNEQ(FieldDay, v))
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldIn(FieldDay, vs...))
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNotIn(FieldDay, vs...))
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGT(FieldDay, v))
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGTE(FieldDay, v))
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLT(FieldDay, v))
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLTE(FieldDay, v))
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldEQ(FieldMonth, v))
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNEQ(FieldMonth, v))
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldIn(FieldMonth, vs...))
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...int) predicate.Birthday {
	return predicate.Birthday(sql.FieldNotIn(FieldMonth, vs...))
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGT(FieldMonth, v))
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldGTE(FieldMonth, v))
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLT(FieldMonth, v))
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v int) predicate.Birthday {
	return predicate.Birthday(sql.FieldLTE(FieldMonth, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Birthday {
	return predicate.Birthday(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Birthday {
	return predicate.Birthday(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Birthday) predicate.Birthday {
	return predicate.Birthday(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Birthday) predicate.Birthday {
	return predicate.Birthday(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Birthday) predicate.Birthday {
	return predicate.Birthday(sql.NotPredicates(p))
}
