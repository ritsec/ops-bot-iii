// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ritsec/ops-bot-iii/ent/birthday"
	"github.com/ritsec/ops-bot-iii/ent/openstack"
	"github.com/ritsec/ops-bot-iii/ent/predicate"
	"github.com/ritsec/ops-bot-iii/ent/shitpost"
	"github.com/ritsec/ops-bot-iii/ent/signin"
	"github.com/ritsec/ops-bot-iii/ent/user"
	"github.com/ritsec/ops-bot-iii/ent/vote"
	"github.com/ritsec/ops-bot-iii/ent/voteresult"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBirthday   = "Birthday"
	TypeOpenstack  = "Openstack"
	TypeShitpost   = "Shitpost"
	TypeSignin     = "Signin"
	TypeUser       = "User"
	TypeVote       = "Vote"
	TypeVoteResult = "VoteResult"
)

// BirthdayMutation represents an operation that mutates the Birthday nodes in the graph.
type BirthdayMutation struct {
	config
	op            Op
	typ           string
	id            *int
	day           *int
	addday        *int
	month         *int
	addmonth      *int
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Birthday, error)
	predicates    []predicate.Birthday
}

var _ ent.Mutation = (*BirthdayMutation)(nil)

// birthdayOption allows management of the mutation configuration using functional options.
type birthdayOption func(*BirthdayMutation)

// newBirthdayMutation creates new mutation for the Birthday entity.
func newBirthdayMutation(c config, op Op, opts ...birthdayOption) *BirthdayMutation {
	m := &BirthdayMutation{
		config:        c,
		op:            op,
		typ:           TypeBirthday,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBirthdayID sets the ID field of the mutation.
func withBirthdayID(id int) birthdayOption {
	return func(m *BirthdayMutation) {
		var (
			err   error
			once  sync.Once
			value *Birthday
		)
		m.oldValue = func(ctx context.Context) (*Birthday, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Birthday.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBirthday sets the old Birthday of the mutation.
func withBirthday(node *Birthday) birthdayOption {
	return func(m *BirthdayMutation) {
		m.oldValue = func(context.Context) (*Birthday, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BirthdayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BirthdayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BirthdayMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BirthdayMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Birthday.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDay sets the "day" field.
func (m *BirthdayMutation) SetDay(i int) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *BirthdayMutation) Day() (r int, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the Birthday entity.
// If the Birthday object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BirthdayMutation) OldDay(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *BirthdayMutation) AddDay(i int) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *BirthdayMutation) AddedDay() (r int, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *BirthdayMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetMonth sets the "month" field.
func (m *BirthdayMutation) SetMonth(i int) {
	m.month = &i
	m.addmonth = nil
}

// Month returns the value of the "month" field in the mutation.
func (m *BirthdayMutation) Month() (r int, exists bool) {
	v := m.month
	if v == nil {
		return
	}
	return *v, true
}

// OldMonth returns the old "month" field's value of the Birthday entity.
// If the Birthday object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BirthdayMutation) OldMonth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonth: %w", err)
	}
	return oldValue.Month, nil
}

// AddMonth adds i to the "month" field.
func (m *BirthdayMutation) AddMonth(i int) {
	if m.addmonth != nil {
		*m.addmonth += i
	} else {
		m.addmonth = &i
	}
}

// AddedMonth returns the value that was added to the "month" field in this mutation.
func (m *BirthdayMutation) AddedMonth() (r int, exists bool) {
	v := m.addmonth
	if v == nil {
		return
	}
	return *v, true
}

// ResetMonth resets all changes to the "month" field.
func (m *BirthdayMutation) ResetMonth() {
	m.month = nil
	m.addmonth = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *BirthdayMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *BirthdayMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BirthdayMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *BirthdayMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BirthdayMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BirthdayMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the BirthdayMutation builder.
func (m *BirthdayMutation) Where(ps ...predicate.Birthday) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BirthdayMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BirthdayMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Birthday, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BirthdayMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BirthdayMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Birthday).
func (m *BirthdayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BirthdayMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.day != nil {
		fields = append(fields, birthday.FieldDay)
	}
	if m.month != nil {
		fields = append(fields, birthday.FieldMonth)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BirthdayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case birthday.FieldDay:
		return m.Day()
	case birthday.FieldMonth:
		return m.Month()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BirthdayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case birthday.FieldDay:
		return m.OldDay(ctx)
	case birthday.FieldMonth:
		return m.OldMonth(ctx)
	}
	return nil, fmt.Errorf("unknown Birthday field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BirthdayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case birthday.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	case birthday.FieldMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonth(v)
		return nil
	}
	return fmt.Errorf("unknown Birthday field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BirthdayMutation) AddedFields() []string {
	var fields []string
	if m.addday != nil {
		fields = append(fields, birthday.FieldDay)
	}
	if m.addmonth != nil {
		fields = append(fields, birthday.FieldMonth)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BirthdayMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case birthday.FieldDay:
		return m.AddedDay()
	case birthday.FieldMonth:
		return m.AddedMonth()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BirthdayMutation) AddField(name string, value ent.Value) error {
	switch name {
	case birthday.FieldDay:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	case birthday.FieldMonth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonth(v)
		return nil
	}
	return fmt.Errorf("unknown Birthday numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BirthdayMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BirthdayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BirthdayMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Birthday nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BirthdayMutation) ResetField(name string) error {
	switch name {
	case birthday.FieldDay:
		m.ResetDay()
		return nil
	case birthday.FieldMonth:
		m.ResetMonth()
		return nil
	}
	return fmt.Errorf("unknown Birthday field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BirthdayMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, birthday.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BirthdayMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case birthday.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BirthdayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BirthdayMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BirthdayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, birthday.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BirthdayMutation) EdgeCleared(name string) bool {
	switch name {
	case birthday.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BirthdayMutation) ClearEdge(name string) error {
	switch name {
	case birthday.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Birthday unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BirthdayMutation) ResetEdge(name string) error {
	switch name {
	case birthday.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Birthday edge %s", name)
}

// OpenstackMutation represents an operation that mutates the Openstack nodes in the graph.
type OpenstackMutation struct {
	config
	op            Op
	typ           string
	id            *int
	timestamp     *time.Time
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Openstack, error)
	predicates    []predicate.Openstack
}

var _ ent.Mutation = (*OpenstackMutation)(nil)

// openstackOption allows management of the mutation configuration using functional options.
type openstackOption func(*OpenstackMutation)

// newOpenstackMutation creates new mutation for the Openstack entity.
func newOpenstackMutation(c config, op Op, opts ...openstackOption) *OpenstackMutation {
	m := &OpenstackMutation{
		config:        c,
		op:            op,
		typ:           TypeOpenstack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOpenstackID sets the ID field of the mutation.
func withOpenstackID(id int) openstackOption {
	return func(m *OpenstackMutation) {
		var (
			err   error
			once  sync.Once
			value *Openstack
		)
		m.oldValue = func(ctx context.Context) (*Openstack, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Openstack.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOpenstack sets the old Openstack of the mutation.
func withOpenstack(node *Openstack) openstackOption {
	return func(m *OpenstackMutation) {
		m.oldValue = func(context.Context) (*Openstack, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OpenstackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OpenstackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OpenstackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OpenstackMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Openstack.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *OpenstackMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *OpenstackMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Openstack entity.
// If the Openstack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OpenstackMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *OpenstackMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *OpenstackMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *OpenstackMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *OpenstackMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *OpenstackMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *OpenstackMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *OpenstackMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the OpenstackMutation builder.
func (m *OpenstackMutation) Where(ps ...predicate.Openstack) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OpenstackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OpenstackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Openstack, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OpenstackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OpenstackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Openstack).
func (m *OpenstackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OpenstackMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.timestamp != nil {
		fields = append(fields, openstack.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OpenstackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case openstack.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OpenstackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case openstack.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown Openstack field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OpenstackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case openstack.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown Openstack field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OpenstackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OpenstackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OpenstackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Openstack numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OpenstackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OpenstackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OpenstackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Openstack nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OpenstackMutation) ResetField(name string) error {
	switch name {
	case openstack.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown Openstack field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OpenstackMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, openstack.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OpenstackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case openstack.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OpenstackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OpenstackMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OpenstackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, openstack.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OpenstackMutation) EdgeCleared(name string) bool {
	switch name {
	case openstack.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OpenstackMutation) ClearEdge(name string) error {
	switch name {
	case openstack.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Openstack unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OpenstackMutation) ResetEdge(name string) error {
	switch name {
	case openstack.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Openstack edge %s", name)
}

// ShitpostMutation represents an operation that mutates the Shitpost nodes in the graph.
type ShitpostMutation struct {
	config
	op            Op
	typ           string
	id            *string
	channel_id    *string
	count         *int
	addcount      *int
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Shitpost, error)
	predicates    []predicate.Shitpost
}

var _ ent.Mutation = (*ShitpostMutation)(nil)

// shitpostOption allows management of the mutation configuration using functional options.
type shitpostOption func(*ShitpostMutation)

// newShitpostMutation creates new mutation for the Shitpost entity.
func newShitpostMutation(c config, op Op, opts ...shitpostOption) *ShitpostMutation {
	m := &ShitpostMutation{
		config:        c,
		op:            op,
		typ:           TypeShitpost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShitpostID sets the ID field of the mutation.
func withShitpostID(id string) shitpostOption {
	return func(m *ShitpostMutation) {
		var (
			err   error
			once  sync.Once
			value *Shitpost
		)
		m.oldValue = func(ctx context.Context) (*Shitpost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shitpost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShitpost sets the old Shitpost of the mutation.
func withShitpost(node *Shitpost) shitpostOption {
	return func(m *ShitpostMutation) {
		m.oldValue = func(context.Context) (*Shitpost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShitpostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShitpostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Shitpost entities.
func (m *ShitpostMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShitpostMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShitpostMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shitpost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel_id" field.
func (m *ShitpostMutation) SetChannelID(s string) {
	m.channel_id = &s
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *ShitpostMutation) ChannelID() (r string, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Shitpost entity.
// If the Shitpost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShitpostMutation) OldChannelID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *ShitpostMutation) ResetChannelID() {
	m.channel_id = nil
}

// SetCount sets the "count" field.
func (m *ShitpostMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *ShitpostMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Shitpost entity.
// If the Shitpost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShitpostMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *ShitpostMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *ShitpostMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *ShitpostMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ShitpostMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ShitpostMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ShitpostMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ShitpostMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShitpostMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ShitpostMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ShitpostMutation builder.
func (m *ShitpostMutation) Where(ps ...predicate.Shitpost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShitpostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShitpostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Shitpost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShitpostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShitpostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Shitpost).
func (m *ShitpostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShitpostMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.channel_id != nil {
		fields = append(fields, shitpost.FieldChannelID)
	}
	if m.count != nil {
		fields = append(fields, shitpost.FieldCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShitpostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shitpost.FieldChannelID:
		return m.ChannelID()
	case shitpost.FieldCount:
		return m.Count()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShitpostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shitpost.FieldChannelID:
		return m.OldChannelID(ctx)
	case shitpost.FieldCount:
		return m.OldCount(ctx)
	}
	return nil, fmt.Errorf("unknown Shitpost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShitpostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shitpost.FieldChannelID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case shitpost.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	}
	return fmt.Errorf("unknown Shitpost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShitpostMutation) AddedFields() []string {
	var fields []string
	if m.addcount != nil {
		fields = append(fields, shitpost.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShitpostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shitpost.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShitpostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shitpost.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Shitpost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShitpostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShitpostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShitpostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shitpost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShitpostMutation) ResetField(name string) error {
	switch name {
	case shitpost.FieldChannelID:
		m.ResetChannelID()
		return nil
	case shitpost.FieldCount:
		m.ResetCount()
		return nil
	}
	return fmt.Errorf("unknown Shitpost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShitpostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, shitpost.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShitpostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shitpost.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShitpostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShitpostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShitpostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, shitpost.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShitpostMutation) EdgeCleared(name string) bool {
	switch name {
	case shitpost.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShitpostMutation) ClearEdge(name string) error {
	switch name {
	case shitpost.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Shitpost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShitpostMutation) ResetEdge(name string) error {
	switch name {
	case shitpost.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Shitpost edge %s", name)
}

// SigninMutation represents an operation that mutates the Signin nodes in the graph.
type SigninMutation struct {
	config
	op            Op
	typ           string
	id            *int
	timestamp     *time.Time
	_type         *signin.Type
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Signin, error)
	predicates    []predicate.Signin
}

var _ ent.Mutation = (*SigninMutation)(nil)

// signinOption allows management of the mutation configuration using functional options.
type signinOption func(*SigninMutation)

// newSigninMutation creates new mutation for the Signin entity.
func newSigninMutation(c config, op Op, opts ...signinOption) *SigninMutation {
	m := &SigninMutation{
		config:        c,
		op:            op,
		typ:           TypeSignin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSigninID sets the ID field of the mutation.
func withSigninID(id int) signinOption {
	return func(m *SigninMutation) {
		var (
			err   error
			once  sync.Once
			value *Signin
		)
		m.oldValue = func(ctx context.Context) (*Signin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Signin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSignin sets the old Signin of the mutation.
func withSignin(node *Signin) signinOption {
	return func(m *SigninMutation) {
		m.oldValue = func(context.Context) (*Signin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SigninMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SigninMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SigninMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SigninMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Signin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *SigninMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *SigninMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Signin entity.
// If the Signin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigninMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *SigninMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetType sets the "type" field.
func (m *SigninMutation) SetType(s signin.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SigninMutation) GetType() (r signin.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Signin entity.
// If the Signin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SigninMutation) OldType(ctx context.Context) (v signin.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SigninMutation) ResetType() {
	m._type = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SigninMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SigninMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SigninMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SigninMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SigninMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SigninMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SigninMutation builder.
func (m *SigninMutation) Where(ps ...predicate.Signin) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SigninMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SigninMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Signin, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SigninMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SigninMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Signin).
func (m *SigninMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SigninMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.timestamp != nil {
		fields = append(fields, signin.FieldTimestamp)
	}
	if m._type != nil {
		fields = append(fields, signin.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SigninMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case signin.FieldTimestamp:
		return m.Timestamp()
	case signin.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SigninMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case signin.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case signin.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Signin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SigninMutation) SetField(name string, value ent.Value) error {
	switch name {
	case signin.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case signin.FieldType:
		v, ok := value.(signin.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Signin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SigninMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SigninMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SigninMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Signin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SigninMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SigninMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SigninMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Signin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SigninMutation) ResetField(name string) error {
	switch name {
	case signin.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case signin.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Signin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SigninMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, signin.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SigninMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case signin.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SigninMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SigninMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SigninMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, signin.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SigninMutation) EdgeCleared(name string) bool {
	switch name {
	case signin.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SigninMutation) ClearEdge(name string) error {
	switch name {
	case signin.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Signin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SigninMutation) ResetEdge(name string) error {
	switch name {
	case signin.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Signin edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	email                    *string
	verification_attempts    *int8
	addverification_attempts *int8
	verified                 *bool
	clearedFields            map[string]struct{}
	signins                  map[int]struct{}
	removedsignins           map[int]struct{}
	clearedsignins           bool
	votes                    map[int]struct{}
	removedvotes             map[int]struct{}
	clearedvotes             bool
	shitposts                map[string]struct{}
	removedshitposts         map[string]struct{}
	clearedshitposts         bool
	birthday                 *int
	clearedbirthday          bool
	openstack                *int
	clearedopenstack         bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetVerificationAttempts sets the "verification_attempts" field.
func (m *UserMutation) SetVerificationAttempts(i int8) {
	m.verification_attempts = &i
	m.addverification_attempts = nil
}

// VerificationAttempts returns the value of the "verification_attempts" field in the mutation.
func (m *UserMutation) VerificationAttempts() (r int8, exists bool) {
	v := m.verification_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldVerificationAttempts returns the old "verification_attempts" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerificationAttempts(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerificationAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerificationAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerificationAttempts: %w", err)
	}
	return oldValue.VerificationAttempts, nil
}

// AddVerificationAttempts adds i to the "verification_attempts" field.
func (m *UserMutation) AddVerificationAttempts(i int8) {
	if m.addverification_attempts != nil {
		*m.addverification_attempts += i
	} else {
		m.addverification_attempts = &i
	}
}

// AddedVerificationAttempts returns the value that was added to the "verification_attempts" field in this mutation.
func (m *UserMutation) AddedVerificationAttempts() (r int8, exists bool) {
	v := m.addverification_attempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetVerificationAttempts resets all changes to the "verification_attempts" field.
func (m *UserMutation) ResetVerificationAttempts() {
	m.verification_attempts = nil
	m.addverification_attempts = nil
}

// SetVerified sets the "verified" field.
func (m *UserMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *UserMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *UserMutation) ResetVerified() {
	m.verified = nil
}

// AddSigninIDs adds the "signins" edge to the Signin entity by ids.
func (m *UserMutation) AddSigninIDs(ids ...int) {
	if m.signins == nil {
		m.signins = make(map[int]struct{})
	}
	for i := range ids {
		m.signins[ids[i]] = struct{}{}
	}
}

// ClearSignins clears the "signins" edge to the Signin entity.
func (m *UserMutation) ClearSignins() {
	m.clearedsignins = true
}

// SigninsCleared reports if the "signins" edge to the Signin entity was cleared.
func (m *UserMutation) SigninsCleared() bool {
	return m.clearedsignins
}

// RemoveSigninIDs removes the "signins" edge to the Signin entity by IDs.
func (m *UserMutation) RemoveSigninIDs(ids ...int) {
	if m.removedsignins == nil {
		m.removedsignins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.signins, ids[i])
		m.removedsignins[ids[i]] = struct{}{}
	}
}

// RemovedSignins returns the removed IDs of the "signins" edge to the Signin entity.
func (m *UserMutation) RemovedSigninsIDs() (ids []int) {
	for id := range m.removedsignins {
		ids = append(ids, id)
	}
	return
}

// SigninsIDs returns the "signins" edge IDs in the mutation.
func (m *UserMutation) SigninsIDs() (ids []int) {
	for id := range m.signins {
		ids = append(ids, id)
	}
	return
}

// ResetSignins resets all changes to the "signins" edge.
func (m *UserMutation) ResetSignins() {
	m.signins = nil
	m.clearedsignins = false
	m.removedsignins = nil
}

// AddVoteIDs adds the "votes" edge to the Vote entity by ids.
func (m *UserMutation) AddVoteIDs(ids ...int) {
	if m.votes == nil {
		m.votes = make(map[int]struct{})
	}
	for i := range ids {
		m.votes[ids[i]] = struct{}{}
	}
}

// ClearVotes clears the "votes" edge to the Vote entity.
func (m *UserMutation) ClearVotes() {
	m.clearedvotes = true
}

// VotesCleared reports if the "votes" edge to the Vote entity was cleared.
func (m *UserMutation) VotesCleared() bool {
	return m.clearedvotes
}

// RemoveVoteIDs removes the "votes" edge to the Vote entity by IDs.
func (m *UserMutation) RemoveVoteIDs(ids ...int) {
	if m.removedvotes == nil {
		m.removedvotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.votes, ids[i])
		m.removedvotes[ids[i]] = struct{}{}
	}
}

// RemovedVotes returns the removed IDs of the "votes" edge to the Vote entity.
func (m *UserMutation) RemovedVotesIDs() (ids []int) {
	for id := range m.removedvotes {
		ids = append(ids, id)
	}
	return
}

// VotesIDs returns the "votes" edge IDs in the mutation.
func (m *UserMutation) VotesIDs() (ids []int) {
	for id := range m.votes {
		ids = append(ids, id)
	}
	return
}

// ResetVotes resets all changes to the "votes" edge.
func (m *UserMutation) ResetVotes() {
	m.votes = nil
	m.clearedvotes = false
	m.removedvotes = nil
}

// AddShitpostIDs adds the "shitposts" edge to the Shitpost entity by ids.
func (m *UserMutation) AddShitpostIDs(ids ...string) {
	if m.shitposts == nil {
		m.shitposts = make(map[string]struct{})
	}
	for i := range ids {
		m.shitposts[ids[i]] = struct{}{}
	}
}

// ClearShitposts clears the "shitposts" edge to the Shitpost entity.
func (m *UserMutation) ClearShitposts() {
	m.clearedshitposts = true
}

// ShitpostsCleared reports if the "shitposts" edge to the Shitpost entity was cleared.
func (m *UserMutation) ShitpostsCleared() bool {
	return m.clearedshitposts
}

// RemoveShitpostIDs removes the "shitposts" edge to the Shitpost entity by IDs.
func (m *UserMutation) RemoveShitpostIDs(ids ...string) {
	if m.removedshitposts == nil {
		m.removedshitposts = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.shitposts, ids[i])
		m.removedshitposts[ids[i]] = struct{}{}
	}
}

// RemovedShitposts returns the removed IDs of the "shitposts" edge to the Shitpost entity.
func (m *UserMutation) RemovedShitpostsIDs() (ids []string) {
	for id := range m.removedshitposts {
		ids = append(ids, id)
	}
	return
}

// ShitpostsIDs returns the "shitposts" edge IDs in the mutation.
func (m *UserMutation) ShitpostsIDs() (ids []string) {
	for id := range m.shitposts {
		ids = append(ids, id)
	}
	return
}

// ResetShitposts resets all changes to the "shitposts" edge.
func (m *UserMutation) ResetShitposts() {
	m.shitposts = nil
	m.clearedshitposts = false
	m.removedshitposts = nil
}

// SetBirthdayID sets the "birthday" edge to the Birthday entity by id.
func (m *UserMutation) SetBirthdayID(id int) {
	m.birthday = &id
}

// ClearBirthday clears the "birthday" edge to the Birthday entity.
func (m *UserMutation) ClearBirthday() {
	m.clearedbirthday = true
}

// BirthdayCleared reports if the "birthday" edge to the Birthday entity was cleared.
func (m *UserMutation) BirthdayCleared() bool {
	return m.clearedbirthday
}

// BirthdayID returns the "birthday" edge ID in the mutation.
func (m *UserMutation) BirthdayID() (id int, exists bool) {
	if m.birthday != nil {
		return *m.birthday, true
	}
	return
}

// BirthdayIDs returns the "birthday" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BirthdayID instead. It exists only for internal usage by the builders.
func (m *UserMutation) BirthdayIDs() (ids []int) {
	if id := m.birthday; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBirthday resets all changes to the "birthday" edge.
func (m *UserMutation) ResetBirthday() {
	m.birthday = nil
	m.clearedbirthday = false
}

// SetOpenstackID sets the "openstack" edge to the Openstack entity by id.
func (m *UserMutation) SetOpenstackID(id int) {
	m.openstack = &id
}

// ClearOpenstack clears the "openstack" edge to the Openstack entity.
func (m *UserMutation) ClearOpenstack() {
	m.clearedopenstack = true
}

// OpenstackCleared reports if the "openstack" edge to the Openstack entity was cleared.
func (m *UserMutation) OpenstackCleared() bool {
	return m.clearedopenstack
}

// OpenstackID returns the "openstack" edge ID in the mutation.
func (m *UserMutation) OpenstackID() (id int, exists bool) {
	if m.openstack != nil {
		return *m.openstack, true
	}
	return
}

// OpenstackIDs returns the "openstack" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OpenstackID instead. It exists only for internal usage by the builders.
func (m *UserMutation) OpenstackIDs() (ids []int) {
	if id := m.openstack; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOpenstack resets all changes to the "openstack" edge.
func (m *UserMutation) ResetOpenstack() {
	m.openstack = nil
	m.clearedopenstack = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.verification_attempts != nil {
		fields = append(fields, user.FieldVerificationAttempts)
	}
	if m.verified != nil {
		fields = append(fields, user.FieldVerified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldVerificationAttempts:
		return m.VerificationAttempts()
	case user.FieldVerified:
		return m.Verified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldVerificationAttempts:
		return m.OldVerificationAttempts(ctx)
	case user.FieldVerified:
		return m.OldVerified(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldVerificationAttempts:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerificationAttempts(v)
		return nil
	case user.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addverification_attempts != nil {
		fields = append(fields, user.FieldVerificationAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldVerificationAttempts:
		return m.AddedVerificationAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldVerificationAttempts:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVerificationAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldVerificationAttempts:
		m.ResetVerificationAttempts()
		return nil
	case user.FieldVerified:
		m.ResetVerified()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.signins != nil {
		edges = append(edges, user.EdgeSignins)
	}
	if m.votes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	if m.shitposts != nil {
		edges = append(edges, user.EdgeShitposts)
	}
	if m.birthday != nil {
		edges = append(edges, user.EdgeBirthday)
	}
	if m.openstack != nil {
		edges = append(edges, user.EdgeOpenstack)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSignins:
		ids := make([]ent.Value, 0, len(m.signins))
		for id := range m.signins {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.votes))
		for id := range m.votes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShitposts:
		ids := make([]ent.Value, 0, len(m.shitposts))
		for id := range m.shitposts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBirthday:
		if id := m.birthday; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeOpenstack:
		if id := m.openstack; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedsignins != nil {
		edges = append(edges, user.EdgeSignins)
	}
	if m.removedvotes != nil {
		edges = append(edges, user.EdgeVotes)
	}
	if m.removedshitposts != nil {
		edges = append(edges, user.EdgeShitposts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSignins:
		ids := make([]ent.Value, 0, len(m.removedsignins))
		for id := range m.removedsignins {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.removedvotes))
		for id := range m.removedvotes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShitposts:
		ids := make([]ent.Value, 0, len(m.removedshitposts))
		for id := range m.removedshitposts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedsignins {
		edges = append(edges, user.EdgeSignins)
	}
	if m.clearedvotes {
		edges = append(edges, user.EdgeVotes)
	}
	if m.clearedshitposts {
		edges = append(edges, user.EdgeShitposts)
	}
	if m.clearedbirthday {
		edges = append(edges, user.EdgeBirthday)
	}
	if m.clearedopenstack {
		edges = append(edges, user.EdgeOpenstack)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSignins:
		return m.clearedsignins
	case user.EdgeVotes:
		return m.clearedvotes
	case user.EdgeShitposts:
		return m.clearedshitposts
	case user.EdgeBirthday:
		return m.clearedbirthday
	case user.EdgeOpenstack:
		return m.clearedopenstack
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeBirthday:
		m.ClearBirthday()
		return nil
	case user.EdgeOpenstack:
		m.ClearOpenstack()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSignins:
		m.ResetSignins()
		return nil
	case user.EdgeVotes:
		m.ResetVotes()
		return nil
	case user.EdgeShitposts:
		m.ResetShitposts()
		return nil
	case user.EdgeBirthday:
		m.ResetBirthday()
		return nil
	case user.EdgeOpenstack:
		m.ResetOpenstack()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VoteMutation represents an operation that mutates the Vote nodes in the graph.
type VoteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	selection     *string
	rank          *int
	addrank       *int
	vote_id       *string
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Vote, error)
	predicates    []predicate.Vote
}

var _ ent.Mutation = (*VoteMutation)(nil)

// voteOption allows management of the mutation configuration using functional options.
type voteOption func(*VoteMutation)

// newVoteMutation creates new mutation for the Vote entity.
func newVoteMutation(c config, op Op, opts ...voteOption) *VoteMutation {
	m := &VoteMutation{
		config:        c,
		op:            op,
		typ:           TypeVote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoteID sets the ID field of the mutation.
func withVoteID(id int) voteOption {
	return func(m *VoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Vote
		)
		m.oldValue = func(ctx context.Context) (*Vote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVote sets the old Vote of the mutation.
func withVote(node *Vote) voteOption {
	return func(m *VoteMutation) {
		m.oldValue = func(context.Context) (*Vote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSelection sets the "selection" field.
func (m *VoteMutation) SetSelection(s string) {
	m.selection = &s
}

// Selection returns the value of the "selection" field in the mutation.
func (m *VoteMutation) Selection() (r string, exists bool) {
	v := m.selection
	if v == nil {
		return
	}
	return *v, true
}

// OldSelection returns the old "selection" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldSelection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelection: %w", err)
	}
	return oldValue.Selection, nil
}

// ResetSelection resets all changes to the "selection" field.
func (m *VoteMutation) ResetSelection() {
	m.selection = nil
}

// SetRank sets the "rank" field.
func (m *VoteMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *VoteMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *VoteMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *VoteMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *VoteMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetVoteID sets the "vote_id" field.
func (m *VoteMutation) SetVoteID(s string) {
	m.vote_id = &s
}

// VoteID returns the value of the "vote_id" field in the mutation.
func (m *VoteMutation) VoteID() (r string, exists bool) {
	v := m.vote_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVoteID returns the old "vote_id" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldVoteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoteID: %w", err)
	}
	return oldValue.VoteID, nil
}

// ResetVoteID resets all changes to the "vote_id" field.
func (m *VoteMutation) ResetVoteID() {
	m.vote_id = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *VoteMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *VoteMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *VoteMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *VoteMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *VoteMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *VoteMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the VoteMutation builder.
func (m *VoteMutation) Where(ps ...predicate.Vote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Vote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Vote).
func (m *VoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoteMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.selection != nil {
		fields = append(fields, vote.FieldSelection)
	}
	if m.rank != nil {
		fields = append(fields, vote.FieldRank)
	}
	if m.vote_id != nil {
		fields = append(fields, vote.FieldVoteID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vote.FieldSelection:
		return m.Selection()
	case vote.FieldRank:
		return m.Rank()
	case vote.FieldVoteID:
		return m.VoteID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vote.FieldSelection:
		return m.OldSelection(ctx)
	case vote.FieldRank:
		return m.OldRank(ctx)
	case vote.FieldVoteID:
		return m.OldVoteID(ctx)
	}
	return nil, fmt.Errorf("unknown Vote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vote.FieldSelection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelection(v)
		return nil
	case vote.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case vote.FieldVoteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoteID(v)
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoteMutation) AddedFields() []string {
	var fields []string
	if m.addrank != nil {
		fields = append(fields, vote.FieldRank)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vote.FieldRank:
		return m.AddedRank()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vote.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	}
	return fmt.Errorf("unknown Vote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoteMutation) ResetField(name string) error {
	switch name {
	case vote.FieldSelection:
		m.ResetSelection()
		return nil
	case vote.FieldRank:
		m.ResetRank()
		return nil
	case vote.FieldVoteID:
		m.ResetVoteID()
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, vote.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vote.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, vote.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoteMutation) EdgeCleared(name string) bool {
	switch name {
	case vote.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoteMutation) ClearEdge(name string) error {
	switch name {
	case vote.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Vote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoteMutation) ResetEdge(name string) error {
	switch name {
	case vote.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Vote edge %s", name)
}

// VoteResultMutation represents an operation that mutates the VoteResult nodes in the graph.
type VoteResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	html          *string
	plain         *string
	vote_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VoteResult, error)
	predicates    []predicate.VoteResult
}

var _ ent.Mutation = (*VoteResultMutation)(nil)

// voteresultOption allows management of the mutation configuration using functional options.
type voteresultOption func(*VoteResultMutation)

// newVoteResultMutation creates new mutation for the VoteResult entity.
func newVoteResultMutation(c config, op Op, opts ...voteresultOption) *VoteResultMutation {
	m := &VoteResultMutation{
		config:        c,
		op:            op,
		typ:           TypeVoteResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoteResultID sets the ID field of the mutation.
func withVoteResultID(id int) voteresultOption {
	return func(m *VoteResultMutation) {
		var (
			err   error
			once  sync.Once
			value *VoteResult
		)
		m.oldValue = func(ctx context.Context) (*VoteResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VoteResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVoteResult sets the old VoteResult of the mutation.
func withVoteResult(node *VoteResult) voteresultOption {
	return func(m *VoteResultMutation) {
		m.oldValue = func(context.Context) (*VoteResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoteResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoteResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoteResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoteResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VoteResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHTML sets the "html" field.
func (m *VoteResultMutation) SetHTML(s string) {
	m.html = &s
}

// HTML returns the value of the "html" field in the mutation.
func (m *VoteResultMutation) HTML() (r string, exists bool) {
	v := m.html
	if v == nil {
		return
	}
	return *v, true
}

// OldHTML returns the old "html" field's value of the VoteResult entity.
// If the VoteResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteResultMutation) OldHTML(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTML is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTML requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTML: %w", err)
	}
	return oldValue.HTML, nil
}

// ResetHTML resets all changes to the "html" field.
func (m *VoteResultMutation) ResetHTML() {
	m.html = nil
}

// SetPlain sets the "plain" field.
func (m *VoteResultMutation) SetPlain(s string) {
	m.plain = &s
}

// Plain returns the value of the "plain" field in the mutation.
func (m *VoteResultMutation) Plain() (r string, exists bool) {
	v := m.plain
	if v == nil {
		return
	}
	return *v, true
}

// OldPlain returns the old "plain" field's value of the VoteResult entity.
// If the VoteResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteResultMutation) OldPlain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlain: %w", err)
	}
	return oldValue.Plain, nil
}

// ResetPlain resets all changes to the "plain" field.
func (m *VoteResultMutation) ResetPlain() {
	m.plain = nil
}

// SetVoteID sets the "vote_id" field.
func (m *VoteResultMutation) SetVoteID(s string) {
	m.vote_id = &s
}

// VoteID returns the value of the "vote_id" field in the mutation.
func (m *VoteResultMutation) VoteID() (r string, exists bool) {
	v := m.vote_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVoteID returns the old "vote_id" field's value of the VoteResult entity.
// If the VoteResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteResultMutation) OldVoteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoteID: %w", err)
	}
	return oldValue.VoteID, nil
}

// ResetVoteID resets all changes to the "vote_id" field.
func (m *VoteResultMutation) ResetVoteID() {
	m.vote_id = nil
}

// Where appends a list predicates to the VoteResultMutation builder.
func (m *VoteResultMutation) Where(ps ...predicate.VoteResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VoteResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VoteResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VoteResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VoteResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VoteResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VoteResult).
func (m *VoteResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoteResultMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.html != nil {
		fields = append(fields, voteresult.FieldHTML)
	}
	if m.plain != nil {
		fields = append(fields, voteresult.FieldPlain)
	}
	if m.vote_id != nil {
		fields = append(fields, voteresult.FieldVoteID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoteResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case voteresult.FieldHTML:
		return m.HTML()
	case voteresult.FieldPlain:
		return m.Plain()
	case voteresult.FieldVoteID:
		return m.VoteID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoteResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case voteresult.FieldHTML:
		return m.OldHTML(ctx)
	case voteresult.FieldPlain:
		return m.OldPlain(ctx)
	case voteresult.FieldVoteID:
		return m.OldVoteID(ctx)
	}
	return nil, fmt.Errorf("unknown VoteResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case voteresult.FieldHTML:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTML(v)
		return nil
	case voteresult.FieldPlain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlain(v)
		return nil
	case voteresult.FieldVoteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoteID(v)
		return nil
	}
	return fmt.Errorf("unknown VoteResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoteResultMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoteResultMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VoteResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoteResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoteResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoteResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VoteResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoteResultMutation) ResetField(name string) error {
	switch name {
	case voteresult.FieldHTML:
		m.ResetHTML()
		return nil
	case voteresult.FieldPlain:
		m.ResetPlain()
		return nil
	case voteresult.FieldVoteID:
		m.ResetVoteID()
		return nil
	}
	return fmt.Errorf("unknown VoteResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoteResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoteResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoteResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoteResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoteResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoteResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoteResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VoteResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoteResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VoteResult edge %s", name)
}
