// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ritsec/ops-bot-iii/ent/birthday"
	"github.com/ritsec/ops-bot-iii/ent/user"
)

// BirthdayCreate is the builder for creating a Birthday entity.
type BirthdayCreate struct {
	config
	mutation *BirthdayMutation
	hooks    []Hook
}

// SetDay sets the "day" field.
func (bc *BirthdayCreate) SetDay(i int) *BirthdayCreate {
	bc.mutation.SetDay(i)
	return bc
}

// SetMonth sets the "month" field.
func (bc *BirthdayCreate) SetMonth(i int) *BirthdayCreate {
	bc.mutation.SetMonth(i)
	return bc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BirthdayCreate) SetUserID(id string) *BirthdayCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bc *BirthdayCreate) SetNillableUserID(id *string) *BirthdayCreate {
	if id != nil {
		bc = bc.SetUserID(*id)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BirthdayCreate) SetUser(u *User) *BirthdayCreate {
	return bc.SetUserID(u.ID)
}

// Mutation returns the BirthdayMutation object of the builder.
func (bc *BirthdayCreate) Mutation() *BirthdayMutation {
	return bc.mutation
}

// Save creates the Birthday in the database.
func (bc *BirthdayCreate) Save(ctx context.Context) (*Birthday, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BirthdayCreate) SaveX(ctx context.Context) *Birthday {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BirthdayCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BirthdayCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BirthdayCreate) check() error {
	if _, ok := bc.mutation.Day(); !ok {
		return &ValidationError{Name: "day", err: errors.New(`ent: missing required field "Birthday.day"`)}
	}
	if v, ok := bc.mutation.Day(); ok {
		if err := birthday.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "Birthday.day": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Month(); !ok {
		return &ValidationError{Name: "month", err: errors.New(`ent: missing required field "Birthday.month"`)}
	}
	if v, ok := bc.mutation.Month(); ok {
		if err := birthday.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "Birthday.month": %w`, err)}
		}
	}
	return nil
}

func (bc *BirthdayCreate) sqlSave(ctx context.Context) (*Birthday, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BirthdayCreate) createSpec() (*Birthday, *sqlgraph.CreateSpec) {
	var (
		_node = &Birthday{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(birthday.Table, sqlgraph.NewFieldSpec(birthday.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Day(); ok {
		_spec.SetField(birthday.FieldDay, field.TypeInt, value)
		_node.Day = value
	}
	if value, ok := bc.mutation.Month(); ok {
		_spec.SetField(birthday.FieldMonth, field.TypeInt, value)
		_node.Month = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birthday.UserTable,
			Columns: []string{birthday.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_birthday = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BirthdayCreateBulk is the builder for creating many Birthday entities in bulk.
type BirthdayCreateBulk struct {
	config
	err      error
	builders []*BirthdayCreate
}

// Save creates the Birthday entities in the database.
func (bcb *BirthdayCreateBulk) Save(ctx context.Context) ([]*Birthday, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Birthday, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BirthdayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BirthdayCreateBulk) SaveX(ctx context.Context) []*Birthday {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BirthdayCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BirthdayCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
