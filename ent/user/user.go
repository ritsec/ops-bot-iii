// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldVerificationAttempts holds the string denoting the verification_attempts field in the database.
	FieldVerificationAttempts = "verification_attempts"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// EdgeSignins holds the string denoting the signins edge name in mutations.
	EdgeSignins = "signins"
	// EdgeVotes holds the string denoting the votes edge name in mutations.
	EdgeVotes = "votes"
	// EdgeShitposts holds the string denoting the shitposts edge name in mutations.
	EdgeShitposts = "shitposts"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SigninsTable is the table that holds the signins relation/edge.
	SigninsTable = "signins"
	// SigninsInverseTable is the table name for the Signin entity.
	// It exists in this package in order to avoid circular dependency with the "signin" package.
	SigninsInverseTable = "signins"
	// SigninsColumn is the table column denoting the signins relation/edge.
	SigninsColumn = "user_signins"
	// VotesTable is the table that holds the votes relation/edge.
	VotesTable = "votes"
	// VotesInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VotesInverseTable = "votes"
	// VotesColumn is the table column denoting the votes relation/edge.
	VotesColumn = "user_votes"
	// ShitpostsTable is the table that holds the shitposts relation/edge.
	ShitpostsTable = "shitposts"
	// ShitpostsInverseTable is the table name for the Shitpost entity.
	// It exists in this package in order to avoid circular dependency with the "shitpost" package.
	ShitpostsInverseTable = "shitposts"
	// ShitpostsColumn is the table column denoting the shitposts relation/edge.
	ShitpostsColumn = "user_shitposts"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldVerificationAttempts,
	FieldVerified,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultVerificationAttempts holds the default value on creation for the "verification_attempts" field.
	DefaultVerificationAttempts int8
	// VerificationAttemptsValidator is a validator for the "verification_attempts" field. It is called by the builders before save.
	VerificationAttemptsValidator func(int8) error
	// DefaultVerified holds the default value on creation for the "verified" field.
	DefaultVerified bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByVerificationAttempts orders the results by the verification_attempts field.
func ByVerificationAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationAttempts, opts...).ToFunc()
}

// ByVerified orders the results by the verified field.
func ByVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerified, opts...).ToFunc()
}

// BySigninsCount orders the results by signins count.
func BySigninsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSigninsStep(), opts...)
	}
}

// BySignins orders the results by signins terms.
func BySignins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSigninsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVotesCount orders the results by votes count.
func ByVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVotesStep(), opts...)
	}
}

// ByVotes orders the results by votes terms.
func ByVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShitpostsCount orders the results by shitposts count.
func ByShitpostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShitpostsStep(), opts...)
	}
}

// ByShitposts orders the results by shitposts terms.
func ByShitposts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShitpostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSigninsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SigninsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SigninsTable, SigninsColumn),
	)
}
func newVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
	)
}
func newShitpostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShitpostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShitpostsTable, ShitpostsColumn),
	)
}
