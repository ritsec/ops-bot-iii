// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ritsec/ops-bot-iii/ent/predicate"
	"github.com/ritsec/ops-bot-iii/ent/voteresult"
)

// VoteResultDelete is the builder for deleting a VoteResult entity.
type VoteResultDelete struct {
	config
	hooks    []Hook
	mutation *VoteResultMutation
}

// Where appends a list predicates to the VoteResultDelete builder.
func (vrd *VoteResultDelete) Where(ps ...predicate.VoteResult) *VoteResultDelete {
	vrd.mutation.Where(ps...)
	return vrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vrd *VoteResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vrd.sqlExec, vrd.mutation, vrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vrd *VoteResultDelete) ExecX(ctx context.Context) int {
	n, err := vrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vrd *VoteResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(voteresult.Table, sqlgraph.NewFieldSpec(voteresult.FieldID, field.TypeInt))
	if ps := vrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vrd.mutation.done = true
	return affected, err
}

// VoteResultDeleteOne is the builder for deleting a single VoteResult entity.
type VoteResultDeleteOne struct {
	vrd *VoteResultDelete
}

// Where appends a list predicates to the VoteResultDelete builder.
func (vrdo *VoteResultDeleteOne) Where(ps ...predicate.VoteResult) *VoteResultDeleteOne {
	vrdo.vrd.mutation.Where(ps...)
	return vrdo
}

// Exec executes the deletion query.
func (vrdo *VoteResultDeleteOne) Exec(ctx context.Context) error {
	n, err := vrdo.vrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{voteresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vrdo *VoteResultDeleteOne) ExecX(ctx context.Context) {
	if err := vrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
