// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ritsec/ops-bot-iii/ent/birthday"
	"github.com/ritsec/ops-bot-iii/ent/openstack"
	"github.com/ritsec/ops-bot-iii/ent/schema"
	"github.com/ritsec/ops-bot-iii/ent/shitpost"
	"github.com/ritsec/ops-bot-iii/ent/signin"
	"github.com/ritsec/ops-bot-iii/ent/user"
	"github.com/ritsec/ops-bot-iii/ent/vote"
	"github.com/ritsec/ops-bot-iii/ent/voteresult"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	birthdayFields := schema.Birthday{}.Fields()
	_ = birthdayFields
	// birthdayDescDay is the schema descriptor for day field.
	birthdayDescDay := birthdayFields[0].Descriptor()
	// birthday.DayValidator is a validator for the "day" field. It is called by the builders before save.
	birthday.DayValidator = func() func(int) error {
		validators := birthdayDescDay.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(day int) error {
			for _, fn := range fns {
				if err := fn(day); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// birthdayDescMonth is the schema descriptor for month field.
	birthdayDescMonth := birthdayFields[1].Descriptor()
	// birthday.MonthValidator is a validator for the "month" field. It is called by the builders before save.
	birthday.MonthValidator = func() func(int) error {
		validators := birthdayDescMonth.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(month int) error {
			for _, fn := range fns {
				if err := fn(month); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	openstackFields := schema.Openstack{}.Fields()
	_ = openstackFields
	// openstackDescTimestamp is the schema descriptor for timestamp field.
	openstackDescTimestamp := openstackFields[0].Descriptor()
	// openstack.DefaultTimestamp holds the default value on creation for the timestamp field.
	openstack.DefaultTimestamp = openstackDescTimestamp.Default.(func() time.Time)
	shitpostFields := schema.Shitpost{}.Fields()
	_ = shitpostFields
	// shitpostDescChannelID is the schema descriptor for channel_id field.
	shitpostDescChannelID := shitpostFields[1].Descriptor()
	// shitpost.ChannelIDValidator is a validator for the "channel_id" field. It is called by the builders before save.
	shitpost.ChannelIDValidator = shitpostDescChannelID.Validators[0].(func(string) error)
	// shitpostDescID is the schema descriptor for id field.
	shitpostDescID := shitpostFields[0].Descriptor()
	// shitpost.IDValidator is a validator for the "id" field. It is called by the builders before save.
	shitpost.IDValidator = shitpostDescID.Validators[0].(func(string) error)
	signinFields := schema.Signin{}.Fields()
	_ = signinFields
	// signinDescTimestamp is the schema descriptor for timestamp field.
	signinDescTimestamp := signinFields[0].Descriptor()
	// signin.DefaultTimestamp holds the default value on creation for the timestamp field.
	signin.DefaultTimestamp = signinDescTimestamp.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.DefaultEmail holds the default value on creation for the email field.
	user.DefaultEmail = userDescEmail.Default.(string)
	// userDescVerificationAttempts is the schema descriptor for verification_attempts field.
	userDescVerificationAttempts := userFields[2].Descriptor()
	// user.DefaultVerificationAttempts holds the default value on creation for the verification_attempts field.
	user.DefaultVerificationAttempts = userDescVerificationAttempts.Default.(int8)
	// user.VerificationAttemptsValidator is a validator for the "verification_attempts" field. It is called by the builders before save.
	user.VerificationAttemptsValidator = userDescVerificationAttempts.Validators[0].(func(int8) error)
	// userDescVerified is the schema descriptor for verified field.
	userDescVerified := userFields[3].Descriptor()
	// user.DefaultVerified holds the default value on creation for the verified field.
	user.DefaultVerified = userDescVerified.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
	voteFields := schema.Vote{}.Fields()
	_ = voteFields
	// voteDescSelection is the schema descriptor for selection field.
	voteDescSelection := voteFields[0].Descriptor()
	// vote.SelectionValidator is a validator for the "selection" field. It is called by the builders before save.
	vote.SelectionValidator = voteDescSelection.Validators[0].(func(string) error)
	// voteDescRank is the schema descriptor for rank field.
	voteDescRank := voteFields[1].Descriptor()
	// vote.RankValidator is a validator for the "rank" field. It is called by the builders before save.
	vote.RankValidator = voteDescRank.Validators[0].(func(int) error)
	// voteDescVoteID is the schema descriptor for vote_id field.
	voteDescVoteID := voteFields[2].Descriptor()
	// vote.VoteIDValidator is a validator for the "vote_id" field. It is called by the builders before save.
	vote.VoteIDValidator = voteDescVoteID.Validators[0].(func(string) error)
	voteresultFields := schema.VoteResult{}.Fields()
	_ = voteresultFields
	// voteresultDescVoteID is the schema descriptor for vote_id field.
	voteresultDescVoteID := voteresultFields[2].Descriptor()
	// voteresult.VoteIDValidator is a validator for the "vote_id" field. It is called by the builders before save.
	voteresult.VoteIDValidator = voteresultDescVoteID.Validators[0].(func(string) error)
}
