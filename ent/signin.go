// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ritsec/ops-bot-iii/ent/signin"
	"github.com/ritsec/ops-bot-iii/ent/user"
)

// Signin is the model entity for the Signin schema.
type Signin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time of signin
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Type of signin
	Type signin.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SigninQuery when eager-loading is set.
	Edges        SigninEdges `json:"edges"`
	user_signins *string
	selectValues sql.SelectValues
}

// SigninEdges holds the relations/edges for other nodes in the graph.
type SigninEdges struct {
	// User who signed in
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SigninEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Signin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signin.FieldID:
			values[i] = new(sql.NullInt64)
		case signin.FieldType:
			values[i] = new(sql.NullString)
		case signin.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case signin.ForeignKeys[0]: // user_signins
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Signin fields.
func (s *Signin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case signin.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				s.Timestamp = value.Time
			}
		case signin.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = signin.Type(value.String)
			}
		case signin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_signins", values[i])
			} else if value.Valid {
				s.user_signins = new(string)
				*s.user_signins = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Signin.
// This includes values selected through modifiers, order, etc.
func (s *Signin) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Signin entity.
func (s *Signin) QueryUser() *UserQuery {
	return NewSigninClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Signin.
// Note that you need to call Signin.Unwrap() before calling this method if this Signin
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Signin) Update() *SigninUpdateOne {
	return NewSigninClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Signin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Signin) Unwrap() *Signin {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Signin is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Signin) String() string {
	var builder strings.Builder
	builder.WriteString("Signin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(s.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Signins is a parsable slice of Signin.
type Signins []*Signin
