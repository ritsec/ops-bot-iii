// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ritsec/ops-bot-iii/ent/voteresult"
)

// VoteResultCreate is the builder for creating a VoteResult entity.
type VoteResultCreate struct {
	config
	mutation *VoteResultMutation
	hooks    []Hook
}

// SetHTML sets the "html" field.
func (vrc *VoteResultCreate) SetHTML(s string) *VoteResultCreate {
	vrc.mutation.SetHTML(s)
	return vrc
}

// SetPlain sets the "plain" field.
func (vrc *VoteResultCreate) SetPlain(s string) *VoteResultCreate {
	vrc.mutation.SetPlain(s)
	return vrc
}

// SetVoteID sets the "vote_id" field.
func (vrc *VoteResultCreate) SetVoteID(s string) *VoteResultCreate {
	vrc.mutation.SetVoteID(s)
	return vrc
}

// Mutation returns the VoteResultMutation object of the builder.
func (vrc *VoteResultCreate) Mutation() *VoteResultMutation {
	return vrc.mutation
}

// Save creates the VoteResult in the database.
func (vrc *VoteResultCreate) Save(ctx context.Context) (*VoteResult, error) {
	return withHooks(ctx, vrc.sqlSave, vrc.mutation, vrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VoteResultCreate) SaveX(ctx context.Context) *VoteResult {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrc *VoteResultCreate) Exec(ctx context.Context) error {
	_, err := vrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrc *VoteResultCreate) ExecX(ctx context.Context) {
	if err := vrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VoteResultCreate) check() error {
	if _, ok := vrc.mutation.HTML(); !ok {
		return &ValidationError{Name: "html", err: errors.New(`ent: missing required field "VoteResult.html"`)}
	}
	if _, ok := vrc.mutation.Plain(); !ok {
		return &ValidationError{Name: "plain", err: errors.New(`ent: missing required field "VoteResult.plain"`)}
	}
	if _, ok := vrc.mutation.VoteID(); !ok {
		return &ValidationError{Name: "vote_id", err: errors.New(`ent: missing required field "VoteResult.vote_id"`)}
	}
	if v, ok := vrc.mutation.VoteID(); ok {
		if err := voteresult.VoteIDValidator(v); err != nil {
			return &ValidationError{Name: "vote_id", err: fmt.Errorf(`ent: validator failed for field "VoteResult.vote_id": %w`, err)}
		}
	}
	return nil
}

func (vrc *VoteResultCreate) sqlSave(ctx context.Context) (*VoteResult, error) {
	if err := vrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vrc.mutation.id = &_node.ID
	vrc.mutation.done = true
	return _node, nil
}

func (vrc *VoteResultCreate) createSpec() (*VoteResult, *sqlgraph.CreateSpec) {
	var (
		_node = &VoteResult{config: vrc.config}
		_spec = sqlgraph.NewCreateSpec(voteresult.Table, sqlgraph.NewFieldSpec(voteresult.FieldID, field.TypeInt))
	)
	if value, ok := vrc.mutation.HTML(); ok {
		_spec.SetField(voteresult.FieldHTML, field.TypeString, value)
		_node.HTML = value
	}
	if value, ok := vrc.mutation.Plain(); ok {
		_spec.SetField(voteresult.FieldPlain, field.TypeString, value)
		_node.Plain = value
	}
	if value, ok := vrc.mutation.VoteID(); ok {
		_spec.SetField(voteresult.FieldVoteID, field.TypeString, value)
		_node.VoteID = value
	}
	return _node, _spec
}

// VoteResultCreateBulk is the builder for creating many VoteResult entities in bulk.
type VoteResultCreateBulk struct {
	config
	err      error
	builders []*VoteResultCreate
}

// Save creates the VoteResult entities in the database.
func (vrcb *VoteResultCreateBulk) Save(ctx context.Context) ([]*VoteResult, error) {
	if vrcb.err != nil {
		return nil, vrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VoteResult, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VoteResultCreateBulk) SaveX(ctx context.Context) []*VoteResult {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrcb *VoteResultCreateBulk) Exec(ctx context.Context) error {
	_, err := vrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrcb *VoteResultCreateBulk) ExecX(ctx context.Context) {
	if err := vrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
