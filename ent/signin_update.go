// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ritsec/ops-bot-iii/ent/predicate"
	"github.com/ritsec/ops-bot-iii/ent/signin"
	"github.com/ritsec/ops-bot-iii/ent/user"
)

// SigninUpdate is the builder for updating Signin entities.
type SigninUpdate struct {
	config
	hooks    []Hook
	mutation *SigninMutation
}

// Where appends a list predicates to the SigninUpdate builder.
func (su *SigninUpdate) Where(ps ...predicate.Signin) *SigninUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTimestamp sets the "timestamp" field.
func (su *SigninUpdate) SetTimestamp(t time.Time) *SigninUpdate {
	su.mutation.SetTimestamp(t)
	return su
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (su *SigninUpdate) SetNillableTimestamp(t *time.Time) *SigninUpdate {
	if t != nil {
		su.SetTimestamp(*t)
	}
	return su
}

// SetType sets the "type" field.
func (su *SigninUpdate) SetType(s signin.Type) *SigninUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *SigninUpdate) SetNillableType(s *signin.Type) *SigninUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *SigninUpdate) SetUserID(id string) *SigninUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SigninUpdate) SetUser(u *User) *SigninUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the SigninMutation object of the builder.
func (su *SigninUpdate) Mutation() *SigninMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *SigninUpdate) ClearUser() *SigninUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SigninUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SigninUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SigninUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SigninUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SigninUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := signin.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Signin.type": %w`, err)}
		}
	}
	if su.mutation.UserCleared() && len(su.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Signin.user"`)
	}
	return nil
}

func (su *SigninUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signin.Table, signin.Columns, sqlgraph.NewFieldSpec(signin.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Timestamp(); ok {
		_spec.SetField(signin.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(signin.FieldType, field.TypeEnum, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signin.UserTable,
			Columns: []string{signin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signin.UserTable,
			Columns: []string{signin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SigninUpdateOne is the builder for updating a single Signin entity.
type SigninUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SigninMutation
}

// SetTimestamp sets the "timestamp" field.
func (suo *SigninUpdateOne) SetTimestamp(t time.Time) *SigninUpdateOne {
	suo.mutation.SetTimestamp(t)
	return suo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (suo *SigninUpdateOne) SetNillableTimestamp(t *time.Time) *SigninUpdateOne {
	if t != nil {
		suo.SetTimestamp(*t)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *SigninUpdateOne) SetType(s signin.Type) *SigninUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *SigninUpdateOne) SetNillableType(s *signin.Type) *SigninUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *SigninUpdateOne) SetUserID(id string) *SigninUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SigninUpdateOne) SetUser(u *User) *SigninUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the SigninMutation object of the builder.
func (suo *SigninUpdateOne) Mutation() *SigninMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SigninUpdateOne) ClearUser() *SigninUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Where appends a list predicates to the SigninUpdate builder.
func (suo *SigninUpdateOne) Where(ps ...predicate.Signin) *SigninUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SigninUpdateOne) Select(field string, fields ...string) *SigninUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Signin entity.
func (suo *SigninUpdateOne) Save(ctx context.Context) (*Signin, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SigninUpdateOne) SaveX(ctx context.Context) *Signin {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SigninUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SigninUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SigninUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := signin.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Signin.type": %w`, err)}
		}
	}
	if suo.mutation.UserCleared() && len(suo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Signin.user"`)
	}
	return nil
}

func (suo *SigninUpdateOne) sqlSave(ctx context.Context) (_node *Signin, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signin.Table, signin.Columns, sqlgraph.NewFieldSpec(signin.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Signin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signin.FieldID)
		for _, f := range fields {
			if !signin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Timestamp(); ok {
		_spec.SetField(signin.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(signin.FieldType, field.TypeEnum, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signin.UserTable,
			Columns: []string{signin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signin.UserTable,
			Columns: []string{signin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Signin{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
