// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ritsec/ops-bot-iii/ent/birthday"
	"github.com/ritsec/ops-bot-iii/ent/predicate"
	"github.com/ritsec/ops-bot-iii/ent/user"
)

// BirthdayUpdate is the builder for updating Birthday entities.
type BirthdayUpdate struct {
	config
	hooks    []Hook
	mutation *BirthdayMutation
}

// Where appends a list predicates to the BirthdayUpdate builder.
func (bu *BirthdayUpdate) Where(ps ...predicate.Birthday) *BirthdayUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetDay sets the "day" field.
func (bu *BirthdayUpdate) SetDay(i int) *BirthdayUpdate {
	bu.mutation.ResetDay()
	bu.mutation.SetDay(i)
	return bu
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (bu *BirthdayUpdate) SetNillableDay(i *int) *BirthdayUpdate {
	if i != nil {
		bu.SetDay(*i)
	}
	return bu
}

// AddDay adds i to the "day" field.
func (bu *BirthdayUpdate) AddDay(i int) *BirthdayUpdate {
	bu.mutation.AddDay(i)
	return bu
}

// SetMonth sets the "month" field.
func (bu *BirthdayUpdate) SetMonth(i int) *BirthdayUpdate {
	bu.mutation.ResetMonth()
	bu.mutation.SetMonth(i)
	return bu
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (bu *BirthdayUpdate) SetNillableMonth(i *int) *BirthdayUpdate {
	if i != nil {
		bu.SetMonth(*i)
	}
	return bu
}

// AddMonth adds i to the "month" field.
func (bu *BirthdayUpdate) AddMonth(i int) *BirthdayUpdate {
	bu.mutation.AddMonth(i)
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BirthdayUpdate) SetUserID(id string) *BirthdayUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bu *BirthdayUpdate) SetNillableUserID(id *string) *BirthdayUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BirthdayUpdate) SetUser(u *User) *BirthdayUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BirthdayMutation object of the builder.
func (bu *BirthdayUpdate) Mutation() *BirthdayMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BirthdayUpdate) ClearUser() *BirthdayUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BirthdayUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BirthdayUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BirthdayUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BirthdayUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BirthdayUpdate) check() error {
	if v, ok := bu.mutation.Day(); ok {
		if err := birthday.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "Birthday.day": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Month(); ok {
		if err := birthday.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "Birthday.month": %w`, err)}
		}
	}
	return nil
}

func (bu *BirthdayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(birthday.Table, birthday.Columns, sqlgraph.NewFieldSpec(birthday.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Day(); ok {
		_spec.SetField(birthday.FieldDay, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedDay(); ok {
		_spec.AddField(birthday.FieldDay, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Month(); ok {
		_spec.SetField(birthday.FieldMonth, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedMonth(); ok {
		_spec.AddField(birthday.FieldMonth, field.TypeInt, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birthday.UserTable,
			Columns: []string{birthday.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birthday.UserTable,
			Columns: []string{birthday.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{birthday.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BirthdayUpdateOne is the builder for updating a single Birthday entity.
type BirthdayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BirthdayMutation
}

// SetDay sets the "day" field.
func (buo *BirthdayUpdateOne) SetDay(i int) *BirthdayUpdateOne {
	buo.mutation.ResetDay()
	buo.mutation.SetDay(i)
	return buo
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (buo *BirthdayUpdateOne) SetNillableDay(i *int) *BirthdayUpdateOne {
	if i != nil {
		buo.SetDay(*i)
	}
	return buo
}

// AddDay adds i to the "day" field.
func (buo *BirthdayUpdateOne) AddDay(i int) *BirthdayUpdateOne {
	buo.mutation.AddDay(i)
	return buo
}

// SetMonth sets the "month" field.
func (buo *BirthdayUpdateOne) SetMonth(i int) *BirthdayUpdateOne {
	buo.mutation.ResetMonth()
	buo.mutation.SetMonth(i)
	return buo
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (buo *BirthdayUpdateOne) SetNillableMonth(i *int) *BirthdayUpdateOne {
	if i != nil {
		buo.SetMonth(*i)
	}
	return buo
}

// AddMonth adds i to the "month" field.
func (buo *BirthdayUpdateOne) AddMonth(i int) *BirthdayUpdateOne {
	buo.mutation.AddMonth(i)
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BirthdayUpdateOne) SetUserID(id string) *BirthdayUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buo *BirthdayUpdateOne) SetNillableUserID(id *string) *BirthdayUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BirthdayUpdateOne) SetUser(u *User) *BirthdayUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BirthdayMutation object of the builder.
func (buo *BirthdayUpdateOne) Mutation() *BirthdayMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BirthdayUpdateOne) ClearUser() *BirthdayUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BirthdayUpdate builder.
func (buo *BirthdayUpdateOne) Where(ps ...predicate.Birthday) *BirthdayUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BirthdayUpdateOne) Select(field string, fields ...string) *BirthdayUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Birthday entity.
func (buo *BirthdayUpdateOne) Save(ctx context.Context) (*Birthday, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BirthdayUpdateOne) SaveX(ctx context.Context) *Birthday {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BirthdayUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BirthdayUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BirthdayUpdateOne) check() error {
	if v, ok := buo.mutation.Day(); ok {
		if err := birthday.DayValidator(v); err != nil {
			return &ValidationError{Name: "day", err: fmt.Errorf(`ent: validator failed for field "Birthday.day": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Month(); ok {
		if err := birthday.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "Birthday.month": %w`, err)}
		}
	}
	return nil
}

func (buo *BirthdayUpdateOne) sqlSave(ctx context.Context) (_node *Birthday, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(birthday.Table, birthday.Columns, sqlgraph.NewFieldSpec(birthday.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Birthday.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, birthday.FieldID)
		for _, f := range fields {
			if !birthday.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != birthday.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Day(); ok {
		_spec.SetField(birthday.FieldDay, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedDay(); ok {
		_spec.AddField(birthday.FieldDay, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Month(); ok {
		_spec.SetField(birthday.FieldMonth, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedMonth(); ok {
		_spec.AddField(birthday.FieldMonth, field.TypeInt, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birthday.UserTable,
			Columns: []string{birthday.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   birthday.UserTable,
			Columns: []string{birthday.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Birthday{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{birthday.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
