// Code generated by ent, DO NOT EDIT.

package signin

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the signin type in the database.
	Label = "signin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the signin in the database.
	Table = "signins"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "signins"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_signins"
)

// Columns holds all SQL columns for signin fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "signins"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_signins",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeGeneralMeeting        Type = "General Meeting"
	TypeRedTeam               Type = "Red Team"
	TypeRedTeamRecruiting     Type = "Red Team Recruiting"
	TypeReversing             Type = "Reversing"
	TypeRVAPT                 Type = "RVAPT"
	TypeContagion             Type = "Contagion"
	TypePhysical              Type = "Physical"
	TypeWireless              Type = "Wireless"
	TypeIR                    Type = "IR"
	TypeWiCyS                 Type = "WiCyS"
	TypeOps                   Type = "Ops"
	TypeOpsIG                 Type = "Ops IG"
	TypeVulnerabilityResearch Type = "Vulnerability Research"
	TypeMentorship            Type = "Mentorship"
	TypeOther                 Type = "Other"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeGeneralMeeting, TypeRedTeam, TypeRedTeamRecruiting, TypeReversing, TypeRVAPT, TypeContagion, TypePhysical, TypeWireless, TypeIR, TypeWiCyS, TypeOps, TypeOpsIG, TypeVulnerabilityResearch, TypeMentorship, TypeOther:
		return nil
	default:
		return fmt.Errorf("signin: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Signin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
