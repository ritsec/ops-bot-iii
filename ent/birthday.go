// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ritsec/ops-bot-iii/ent/birthday"
	"github.com/ritsec/ops-bot-iii/ent/user"
)

// Birthday is the model entity for the Birthday schema.
type Birthday struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The day of the month of the birthday
	Day int `json:"day,omitempty"`
	// The month of the birthday
	Month int `json:"month,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BirthdayQuery when eager-loading is set.
	Edges         BirthdayEdges `json:"edges"`
	user_birthday *string
	selectValues  sql.SelectValues
}

// BirthdayEdges holds the relations/edges for other nodes in the graph.
type BirthdayEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BirthdayEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Birthday) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case birthday.FieldID, birthday.FieldDay, birthday.FieldMonth:
			values[i] = new(sql.NullInt64)
		case birthday.ForeignKeys[0]: // user_birthday
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Birthday fields.
func (b *Birthday) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case birthday.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case birthday.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				b.Day = int(value.Int64)
			}
		case birthday.FieldMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field month", values[i])
			} else if value.Valid {
				b.Month = int(value.Int64)
			}
		case birthday.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_birthday", values[i])
			} else if value.Valid {
				b.user_birthday = new(string)
				*b.user_birthday = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Birthday.
// This includes values selected through modifiers, order, etc.
func (b *Birthday) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Birthday entity.
func (b *Birthday) QueryUser() *UserQuery {
	return NewBirthdayClient(b.config).QueryUser(b)
}

// Update returns a builder for updating this Birthday.
// Note that you need to call Birthday.Unwrap() before calling this method if this Birthday
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Birthday) Update() *BirthdayUpdateOne {
	return NewBirthdayClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Birthday entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Birthday) Unwrap() *Birthday {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Birthday is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Birthday) String() string {
	var builder strings.Builder
	builder.WriteString("Birthday(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", b.Day))
	builder.WriteString(", ")
	builder.WriteString("month=")
	builder.WriteString(fmt.Sprintf("%v", b.Month))
	builder.WriteByte(')')
	return builder.String()
}

// Birthdays is a parsable slice of Birthday.
type Birthdays []*Birthday
